# for undercurl to work
set -g default-terminal "xterm-ghostty"

# https://unix.stackexchange.com/questions/175421/default-tmux-config
set -g prefix C-a
set -g history-limit 10000
set -g mouse on
set -g extended-keys on
set -g base-index 1
set -g cursor-style bar

# timeouts
set -g escape-time 0
set -g display-time 500
set -g repeat-time 1000

# statusline
set -g status-interval 5
set -g status-position top
set -g status-justify right
set -g status-left ""
set -g status-right ""
set -g status-style fg=black

set -g window-status-current-style fg=white,bg=black
set -g window-status-format " #{window_name} "
set -g window-status-current-format " #{window_name} #{?window_zoomed_flag,ó°Š“ ,}"
set -g window-status-separator " "

set -g pane-border-style fg=white
set -g pane-active-border-style fg=white
set -g popup-border-style fg=white

set -g copy-mode-match-style fg=black,bg=white
set -g copy-mode-current-match-style fg=black,bg=yellow

# maps
bind-key C-a send-prefix
bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "sourced ~/.config/tmux/tmux.conf"
bind-key -n C-Tab next-window
# https://github.com/tmux/tmux/issues/4136#issuecomment-2394260822
bind-key -n C-BTab previous-window
bind-key ";" command-prompt
bind q detach-client
# bind-key S set-option status
# bind-key M show-messages

# windows (tabs)
bind-key t new-window -n "New Window ###{window_index}"
bind-key R command-prompt "rename-window %%"
# https://superuser.com/questions/343572/how-do-i-reorder-tmux-windows
bind-key -r Left swap-window -t -1 \; select-window -t -1
bind-key -r Right swap-window -t +1 \; select-window -t +1

# panes
bind-key v split-window -c "#{pane_current_path}" -h
bind-key s split-window -c "#{pane_current_path}" -v
bind-key C-s split-window -c "#{pane_current_path}" -v
bind-key X kill-pane
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key -r K swap-pane -s "{up-of}"
bind-key -r J swap-pane -s "{down-of}"
bind-key -r H swap-pane -s "{left-of}"
bind-key -r L swap-pane -s "{right-of}"
bind-key m resize-pane -Z
bind-key -r - resize-pane -D 4
bind-key -r = resize-pane -U 4
bind-key -r < resize-pane -L 4
bind-key -r > resize-pane -R 4

# copy mode
bind-key Space copy-mode
bind-key / copy-mode \; send-keys /
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-q send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi Y send-keys -X copy-end-of-line-and-cancel

# mouse scrolling https://github.com/tmux/tmux/issues/140#issuecomment-474341833
bind-key -T copy-mode-vi WheelUpPane send-keys -X -N 1 scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X -N 1 scroll-down
unbind-key -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode-vi MouseDown1Pane send-keys -X clear-selection
bind-key -T copy-mode-vi DoubleClick1Pane send-keys -X select-word
bind-key -T copy-mode-vi TripleClick1Pane send-keys -X select-line
bind-key -n SecondClick1Pane copy-mode \; send-keys -X select-word
bind-key -n TripleClick1Pane copy-mode \; send-keys -X select-line

# edit scrollback
bind-key e run-shell "tmux capture-pane -p -S - -E - > /tmp/tmux_scrollback.txt" \; display-popup -E -w 90% -h 90% "nvim /tmp/tmux_scrollback.txt"

# grep scrollback
bind-key E command-prompt -p "Pattern:" "run-shell 'tmux-grep-scrollback \"%%\" #{pane_id}'"
# not fully working, %% can't be escaped properly
# bind-key E {
#  command-prompt -p "Pattern:"
#  run-shell "tmux capture-pane -p -S - -E - | grep -i %% > /tmp/tmux_grep_scrollback.txt"
#  display-popup -E -w 90% -h 90% "nvim /tmp/tmux_grep_scrollback.txt"
# }

# lazygit
bind-key a display-popup -E -w 90% -h 90% -d "#{pane_current_path}" "lazygit-yadm"

# floating pane
bind-key f display-popup -E -w 90% -h 90% -d "#{pane_current_path}"

# nvim-tmux-navigation https://github.com/alexghergh/nvim-tmux-navigation
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" { send-keys C-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n C-j if-shell "$is_vim" { send-keys C-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n C-k if-shell "$is_vim" { send-keys C-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n C-l if-shell "$is_vim" { send-keys C-l } { if-shell -F '#{pane_at_right}'  { send-keys C-l } { select-pane -R } }
# restore clear screen
bind-key -n C-S-l send-keys "C-l"
