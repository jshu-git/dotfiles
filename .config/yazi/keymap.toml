# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]

keymap = [
	{ on = "<Tab>", run = "plugin --sync hide-preview" },

	{ on = "<Esc>", run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
	# { on = "<C-[>", run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
	# { on = "q", run = "quit", desc = "Exit the process" },
	# { on = "Q", run = "quit --no-cwd-file", desc = "Exit the process without writing cwd-file" },
	{ on = "q", run = "close" },
	# { on = "<C-z>", run = "suspend", desc = "Suspend the process" },

	# Hopping
	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1", desc = "Move cursor down" },
	{ on = "<C-u>", run = "arrow -50%", desc = "Move cursor up half page" },
	{ on = "<C-d>", run = "arrow 50%", desc = "Move cursor down half page" },

	{ on = [
		"g",
		"g",
	], run = "arrow -99999999", desc = "Move cursor to the top" },
	{ on = "G", run = "arrow 99999999", desc = "Move cursor to the bottom" },

	# Navigation
	{ on = "-", run = "leave" },
	{ on = "<Enter>", run = "plugin --sync smart-enter" },
	{ on = "H", run = "back", desc = "Go back to the previous directory" },
	{ on = "L", run = "forward", desc = "Go forward to the next directory" },

	# Seeking
	# { on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },
	# { on = "J", run = "seek 5", desc = "Seek down 5 units in the preview" },

	# Selection
	{ on = "m", run = [
		"select --state=none",
		"arrow 0",
	] },
	{ on = "V", run = "visual_mode" },
	# { on = "V", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },
	{ on = "<C-a>", run = "select_all --state=true", desc = "Select all files" },
	{ on = "<C-r>", run = "select_all --state=none", desc = "Inverse selection of all files" },

	# Operation
	# { on = "o", run = "open", desc = "Open selected files" },
	# { on = "O", run = "open --interactive", desc = "Open selected files interactively" },
	# { on = "<Enter>", run = "open", desc = "Open selected files" },
	# { on = "<S-Enter>", run = "open --interactive", desc = "Open selected files interactively" },
	{ on = "y", run = "yank", desc = "Yank selected files (copy)" },
	{ on = "x", run = "yank --cut", desc = "Yank selected files (cut)" },
	{ on = "p", run = "paste", desc = "Paste yanked files" },
	# { on = "P", run = "paste --force", desc = "Paste yanked files (overwrite if the destination exists)" },
	# { on = "-", run = "link", desc = "Symlink the absolute path of yanked files" },
	# { on = "_", run = "link --relative", desc = "Symlink the relative path of yanked files" },
	# { on = "Y", run = "unyank", desc = "Cancel the yank status" },
	# { on = "X", run = "unyank", desc = "Cancel the yank status" },
	{ on = "u", run = "unyank" },
	{ on = "d", run = "remove", desc = "Trash selected files" },
	{ on = "D", run = "remove --permanently", desc = "Permanently delete selected files" },
	{ on = "o", run = "create" },
	{ on = "r", run = "rename --cursor=before_ext", desc = "Rename selected file(s)" },
	# { on = ";", run = "shell --interactive", desc = "Run a shell command" },
	# { on = ":", run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
	{ on = [
		"g",
		".",
	], run = "hidden toggle" },
	{ on = [
		"<space>",
		"f",
		"f",
	], run = "search fd" },
	{ on = [
		"<space>",
		"f",
		"w",
	], run = "search rg" },
	{ on = "<C-c>", run = "search none" },
	# { on = "z", run = "plugin zoxide", desc = "Jump to a directory using zoxide" },
	# { on = "Z", run = "plugin fzf", desc = "Jump to a directory or reveal a file using fzf" },

	# Linemode
	{ on = [
		"s",
		"l",
		"s",
	], run = "linemode size", desc = "Set linemode to size" },
	{ on = [
		"s",
		"l",
		"p",
	], run = "linemode permissions", desc = "Set linemode to permissions" },
	{ on = [
		"s",
		"l",
		"c",
	], run = "linemode ctime", desc = "Set linemode to ctime" },
	{ on = [
		"s",
		"l",
		"m",
	], run = "linemode mtime", desc = "Set linemode to mtime" },
	# { on = [
	# 	"s",
	# 	"l",
	# 	"o",
	# ], run = "linemode owner", desc = "Set linemode to owner" },
	{ on = [
		"s",
		"l",
		"l",
	], run = "linemode none", desc = "Set linemode to none" },

	# Copy
	{ on = [
		"c",
		"c",
	], run = "copy path", desc = "Copy the file path" },
	{ on = [
		"c",
		"d",
	], run = "copy dirname", desc = "Copy the directory path" },
	{ on = [
		"c",
		"f",
	], run = "copy filename", desc = "Copy the filename" },
	{ on = [
		"c",
		"n",
	], run = "copy name_without_ext", desc = "Copy the filename without extension" },

	# Filter
	{ on = "f", run = "filter --smart", desc = "Filter files" },

	# Find
	{ on = "/", run = "find --smart", desc = "Find next file" },
	# { on = "?", run = "find --previous --smart", desc = "Find previous file" },
	{ on = "n", run = "find_arrow", desc = "Go to the next found" },
	{ on = "N", run = "find_arrow --previous", desc = "Go to the previous found" },

	# Sorting
	{ on = [
		"s",
		"o",
		"M",
	], run = [
		"sort modified --reverse=no",
		"linemode mtime",
	], desc = "Sort by modified time" },
	{ on = [
		"s",
		"o",
		"m",
	], run = [
		"sort modified --reverse",
		"linemode mtime",
	], desc = "Sort by modified time (reverse)" },
	{ on = [
		"s",
		"o",
		"C",
	], run = [
		"sort created --reverse=no",
		"linemode ctime",
	], desc = "Sort by created time" },
	{ on = [
		"s",
		"o",
		"c",
	], run = [
		"sort created --reverse",
		"linemode ctime",
	], desc = "Sort by created time (reverse)" },
	# { on = [
	# 	",",
	# 	"e",
	# ], run = "sort extension --reverse=no", desc = "Sort by extension" },
	# { on = [
	# 	",",
	# 	"E",
	# ], run = "sort extension --reverse", desc = "Sort by extension (reverse)" },
	{ on = [
		"s",
		"o",
		"a",
	], run = "sort alphabetical --reverse=no", desc = "Sort alphabetically" },
	{ on = [
		"s",
		"o",
		"A",
	], run = "sort alphabetical --reverse", desc = "Sort alphabetically (reverse)" },
	{ on = [
		"s",
		"o",
		"n",
	], run = "sort natural --reverse=no", desc = "Sort naturally" },
	{ on = [
		"s",
		"o",
		"N",
	], run = "sort natural --reverse", desc = "Sort naturally (reverse)" },
	{ on = [
		"s",
		"o",
		"S",
	], run = [
		"sort size --reverse=no",
		"linemode size",
	], desc = "Sort by size" },
	{ on = [
		"s",
		"o",
		"s",
	], run = [
		"sort size --reverse",
		"linemode size",
	], desc = "Sort by size (reverse)" },
	# { on = [
	# 	",",
	# 	"r",
	# ], run = "sort random --reverse=no", desc = "Sort randomly" },

	# Goto
	# { on = [
	# 	"g",
	# 	"h",
	# ], run = "cd ~", desc = "Go to the home directory" },
	# { on = [
	# 	"g",
	# 	"c",
	# ], run = "cd ~/.config", desc = "Go to the config directory" },
	# { on = [
	# 	"g",
	# 	"d",
	# ], run = "cd ~/Downloads", desc = "Go to the downloads directory" },
	# { on = [
	# 	"g",
	# 	"<Space>",
	# ], run = "cd --interactive", desc = "Go to a directory interactively" },

	# Tabs
	{ on = "t", run = "tab_create --current", desc = "Create a new tab with CWD" },
	{ on = "1", run = "tab_switch 0", desc = "Switch to the first tab" },
	{ on = "2", run = "tab_switch 1", desc = "Switch to the second tab" },
	{ on = "3", run = "tab_switch 2", desc = "Switch to the third tab" },
	{ on = "4", run = "tab_switch 3", desc = "Switch to the fourth tab" },
	{ on = "5", run = "tab_switch 4", desc = "Switch to the fifth tab" },
	# { on = "6", run = "tab_switch 5", desc = "Switch to the sixth tab" },
	# { on = "7", run = "tab_switch 6", desc = "Switch to the seventh tab" },
	# { on = "8", run = "tab_switch 7", desc = "Switch to the eighth tab" },
	# { on = "9", run = "tab_switch 8", desc = "Switch to the ninth tab" },
	{ on = "[", run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
	{ on = "]", run = "tab_switch 1 --relative", desc = "Switch to the next tab" },
	{ on = "{", run = "tab_swap -1", desc = "Swap current tab with previous tab" },
	{ on = "}", run = "tab_swap 1", desc = "Swap current tab with next tab" },

	# Tasks
	# { on = "w", run = "tasks_show", desc = "Show task manager" },

	# Help
	{ on = [
		"g",
		"?",
	], run = "help" },
]

[input]
prepend_keymap = [{ on = "<Esc>", run = "close" }]
