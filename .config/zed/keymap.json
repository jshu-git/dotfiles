[
  {
    "bindings": {
      "cmd-d": "workspace::ToggleZoom",
      "cmd-e": "workspace::ToggleRightDock",
      "cmd-t": "workspace::ToggleBottomDock",
      "cmd-r": "pane::RevealInProjectPanel",
      "cmd-shift-,": "zed::OpenDefaultSettings",
      "cmd-shift-j": "journal::NewJournalEntry",
      "cmd-shift-r": "search::ToggleReplace",
      "cmd-shift-k": "zed::OpenKeymap",
      "alt-t": "workspace::NewTerminal",
      "alt-r": "editor::RevealInFinder",
      "alt-c": "editor::CopyPath",
      "alt-shift-c": "editor::CopyRelativePath",
      "ctrl-tab": "pane::ActivateNextItem",
      "ctrl-shift-tab": "pane::ActivatePrevItem",
      "tab": "menu::SelectNext",
      "shift-tab": "menu::SelectPrev",
      // special override for insert mode
      "ctrl-e": "editor::Cancel"
    }
  },
  {
    "context": "Dock",
    "bindings": {
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      // "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  // vim bindings
  {
    // normal + visual
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // leader
      "space w": "workspace::Save",
      // pickers
      "space f f": "file_finder::Toggle",
      "space f r": "projects::OpenRecent",
      "space f d": "diagnostics::Deploy",
      "space f g": "pane::DeploySearch",
      "space f k": "zed::OpenKeymap",
      "space f shift-k": "zed::OpenDefaultKeymap",
      "space f shift-v": "vim::OpenDefaultKeymap",
      "space space": "tab_switcher::Toggle",

      // movement
      "shift-h": "vim::FirstNonWhitespace",
      "shift-l": "vim::EndOfLine",
      "shift-j": ["workspace::SendKeystrokes", "6 j"],
      "shift-k": ["workspace::SendKeystrokes", "6 k"],
      "alt-j": "editor::MoveLineDown",
      "alt-k": "editor::MoveLineUp",
      // "ctrl-d": ["workspace::SendKeystroke", "ctrl-d z z"],
      // "ctrl-u": ["workspace::SendKeystroke", "ctrl-u z z"],
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"],

      // windows
      "ctrl-\\": "pane::SplitRight",
      "ctrl--": "pane::SplitDown",
      "alt-\\": ["workspace::NewFileInDirection", "Right"],
      "alt--": ["workspace::NewFileInDirection", "Down"],
      "ctrl-w s": "pane::SplitDown",
      "ctrl-w v": "pane::SplitRight",
      // "ctrl-right": "increase pane size"

      // g actions
      // lsp
      "g h": "editor::Hover",
      "g f": "editor::OpenExcerptsSplit",
      "g i": "editor::GoToImplementation",
      "g r": "editor::FindAllReferences",
      "g shift-r": "editor::Rename",
      "g d": "editor::GoToDefinitionSplit",
      "g shift-d": "editor::GoToTypeDefinitionSplit",
      "g s": "outline::Toggle",
      "g shift-s": "project_symbols::Toggle",
      // selection
      "g o": "editor::OpenUrl",
      "g a": "editor::SelectAllMatches",
      "g n": [
        "editor::SelectNext",
        {
          "replace_newest": false
        }
      ],
      "g p": [
        "editor::SelectPrevious",
        {
          "replace_newest": false
        }
      ],
      "g N": [
        "editor::SelectNext",
        {
          "replace_newest": true
        }
      ],
      "g P": [
        "editor::SelectPrevious",
        {
          "replace_newest": true
        }
      ],

      // unimpaired
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPrevDiagnostic",
      "] c": "editor::GoToHunk",
      "[ c": "editor::GoToPrevHunk",

      // misc
      "shift-u": "editor::Redo",
      "ctrl-c": "editor::ToggleComments",
      "ctrl-s": "editor::SelectLargerSyntaxNode",
      "ctrl-shift-s": "editor::SelectSmallerSyntaxNode"
    }
  },
  {
    // normal mode
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      "ctrl-space": "editor::ShowCompletions",
      "shift-y": ["workspace::SendKeystrokes", "y $"],
      "s": ["workspace::SendKeystrokes", "c i w"]
    }
  },
  {
    // visual, visual line & visual block modes
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      "shift-v": "vim::Down",
      "ctrl-v": "vim::Down",
      "p": [
        "vim::Paste",
        {
          "preserveClipboard": true
        }
      ]
    }
  },
  {
    // insert mode
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "ctrl-x ctrl-o": null,
      "ctrl-x ctrl-a": null,
      "ctrl-x ctrl-c": null,
      "ctrl-x ctrl-l": null,
      "ctrl-x ctrl-z": null,
      "ctrl-x": "editor::ShowCompletions",
      "ctrl-i": "editor::ShowInlineCompletion",
      "ctrl-shift-i": "assistant::InlineAssist",
      "ctrl-a": "editor::ToggleCodeActions",
      "ctrl-f": "editor::AcceptPartialInlineCompletion"
      // "ctrl-f": "editor::AcceptPartialCopilotSuggestion",
    }
  },
  // project panel/netrw
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "space": "project_panel::Open",
      "enter": "project_panel::OpenPermanent",
      "a": "project_panel::NewFile",
      "o": "project_panel::NewDirectory",
      "x": "project_panel::Delete",
      "shift-X": ["project_panel::Delete", { "skip_prompt": true }],
      "r": "project_panel::Rename",
      "shift-r": "project_panel::RevealInFinder",
      "/": "project_panel::NewSearchInDirectory",
      "d": "project_panel::Cut",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste",
      "alt-c": "project_panel::CopyPath",
      "alt-shift-c": "project_panel::CopyRelativePath"
    }
  },
  // search bindings
  {
    "context": "BufferSearchBar",
    "bindings": {
      "enter": "search::SelectNextMatch"
    }
  },
  // completions
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "shift-tab": "editor::ContextMenuPrev",
      "tab": "editor::ContextMenuNext"
    }
  },
  // tab switcher
  {
    "context": "TabSwitcher",
    "bindings": {
      "x": "tab_switcher::CloseSelectedItem"
    }
  },
  // pane
  {
    "context": "Pane",
    "bindings": {
      "cmd-1": ["pane::ActivateItem", 0],
      "cmd-2": ["pane::ActivateItem", 1],
      "cmd-3": ["pane::ActivateItem", 2],
      "cmd-4": ["pane::ActivateItem", 3],
      "cmd-5": ["pane::ActivateItem", 4],
      "cmd-6": ["pane::ActivateItem", 5],
      "cmd-7": ["pane::ActivateItem", 6],
      "cmd-8": ["pane::ActivateItem", 7],
      "cmd-9": ["pane::ActivateItem", 8]
    }
  }
  // hidden gems
  // {
  //   "context": "ProjectSearchBar && !in_replace",
  //   "bindings": {
  //     "cmd-enter": "project_search::SearchInNew"
  //   }
]
